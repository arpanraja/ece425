%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6350 600 pap
%%Page: cds 1
gis
0 831 4600 5510 clwin
0 831 4594 5514 clwin
0 831 4594 5514 clwin
ssls
0 800 400 slc
0 800 400 sfc
0 -258 1376 2988 dls
0 -368 1524 2988 dls
-295 0 1156 2546 dls
-294 0 2039 2252 dls
295 0 861 1957 dls
1156 2841 dpb
1156 1663 dpv
1745 1957 dpv
1745 2546 dpv
dpu
0 -257 3291 3503 dls
0 -368 3438 3503 dls
-295 0 3070 3062 dls
-295 0 3954 2767 dls
295 0 2775 2472 dls
3070 3356 dpb
3070 2178 dpv
3659 2472 dpv
3659 3062 dpv
dpu
0 258 1376 3356 dls
0 368 1524 3356 dls
-295 0 1156 3798 dls
-294 0 2039 4092 dls
295 0 861 4387 dls
1156 3503 dpb
1156 4681 dpv
1745 4387 dpv
1745 3798 dpv
dpu
224 749 1000 slc
224 749 1000 sfc
147 0 419 3724 dls
0 74 566 3724 dls
515 0 346 2546 dls
515 0 346 1957 dls
442 0 419 4387 dls
295 0 566 3798 dls
295 0 1008 3135 dls
0 73 1303 3062 dls
1303 3135 36 dcs
73 0 1303 3135 dls
73 0 1303 3062 dls
0 221 1376 3135 dls
0 74 1376 2988 dls
0 221 1524 3135 dls
0 74 1524 2988 dls
73 0 1524 3062 dls
73 0 1524 3135 dls
0 73 1597 3062 dls
1597 3135 36 37 dels
221 0 1597 3135 dls
295 0 2039 2252 dls
295 0 2039 4092 dls
0 1030 2334 3062 dls
0 220 2334 2252 dls
441 0 2334 2472 dls
441 0 2334 3062 dls
221 0 3070 3872 dls
0 369 3291 3503 dls
0 369 3438 3503 dls
221 0 3438 3872 dls
294 0 3954 2767 dls
1000 0 0 slc
1000 0 0 sfc
0 -74 177 1994 dls
177 1959 dlt
-7 7 dlv
-7 3 dlv
-10 0 dlv
-7 -3 dlv
-7 -7 dlv
-4 -11 dlv
0 -7 dlv
4 -10 dlv
7 -7 dlv
7 -4 dlv
10 0 dlv
7 4 dlv
7 7 dlv
dle
177 2560 dlt
-7 7 dlv
-7 4 dlv
-10 0 dlv
-7 -4 dlv
-7 -7 dlv
-4 -10 dlv
0 -7 dlv
4 -11 dlv
7 -7 dlv
7 -3 dlv
10 0 dlv
7 3 dlv
7 7 dlv
dle
0 -74 212 4424 dls
212 4389 dlt
7 7 dlv
7 3 dlv
11 0 dlv
7 -3 dlv
7 -7 dlv
3 -11 dlv
0 -7 dlv
-3 -10 dlv
-7 -7 dlv
-7 -4 dlv
-11 0 dlv
-7 4 dlv
-7 7 dlv
dle
0 -49 251 3749 dls
251 3738 dlt
-7 7 dlv
-7 4 dlv
-11 0 dlv
-7 -4 dlv
-7 -7 dlv
-3 -10 dlv
0 -7 dlv
3 -11 dlv
7 -7 dlv
7 -3 dlv
11 0 dlv
7 3 dlv
7 7 dlv
dle
770 3137 dlt
-3 7 dlv
-11 3 dlv
-10 0 dlv
-11 -3 dlv
-3 -7 dlv
3 -7 dlv
7 -4 dlv
18 -3 dlv
7 -4 dlv
3 -7 dlv
0 -3 dlv
-3 -7 dlv
-11 -4 dlv
-10 0 dlv
-11 4 dlv
-3 7 dlv
dle
812 3172 dlt
-10 -4 dlv
-7 -10 dlv
-4 -18 dlv
0 -10 dlv
4 -18 dlv
7 -10 dlv
10 -4 dlv
7 0 dlv
11 4 dlv
7 10 dlv
3 18 dlv
0 10 dlv
-3 18 dlv
-7 10 dlv
-11 4 dlv
-7 0 dlv
dle
-49 -74 840 3172 dls
56 0 1969 3091 dls
2085 3137 dlt
-4 7 dlv
-10 3 dlv
-11 0 dlv
-10 -3 dlv
-4 -7 dlv
4 -7 dlv
7 -4 dlv
17 -3 dlv
7 -4 dlv
4 -7 dlv
0 -3 dlv
-4 -7 dlv
-10 -4 dlv
-11 0 dlv
-10 4 dlv
-4 7 dlv
dle
2127 3172 dlt
-11 -4 dlv
-7 -10 dlv
-3 -18 dlv
0 -10 dlv
3 -18 dlv
7 -10 dlv
11 -4 dlv
7 0 dlv
10 4 dlv
7 10 dlv
4 18 dlv
0 10 dlv
-4 18 dlv
-7 10 dlv
-10 4 dlv
-7 0 dlv
dle
-49 -74 2155 3172 dls
2847 3873 dlt
-4 7 dlv
-10 4 dlv
-11 0 dlv
-10 -4 dlv
-4 -7 dlv
4 -7 dlv
7 -3 dlv
17 -4 dlv
7 -3 dlv
4 -7 dlv
0 -4 dlv
-4 -7 dlv
-10 -3 dlv
-11 0 dlv
-10 3 dlv
-4 7 dlv
dle
2878 3894 dlt
7 4 dlv
11 10 dlv
0 -73 dlv
dle
56 0 3810 3828 dls
3925 3873 dlt
-3 7 dlv
-11 4 dlv
-10 0 dlv
-11 -4 dlv
-3 -7 dlv
3 -7 dlv
7 -3 dlv
18 -4 dlv
7 -3 dlv
3 -7 dlv
0 -4 dlv
-3 -7 dlv
-11 -3 dlv
-10 0 dlv
-11 3 dlv
-3 7 dlv
dle
3957 3894 dlt
7 4 dlv
11 10 dlv
0 -73 dlv
dle
21 -50 4366 2792 dls
4408 2792 dlt
-21 -50 dlv
-7 -14 dlv
-7 -7 dlv
-7 -3 dlv
-4 0 dlv
dle
1362 2632 dlt
-7 -3 dlv
-3 -11 dlv
0 -11 dlv
3 -10 dlv
7 -4 dlv
7 4 dlv
4 7 dlv
3 18 dlv
4 7 dlv
7 3 dlv
3 0 dlv
7 -3 dlv
4 -11 dlv
0 -11 dlv
-4 -10 dlv
-7 -4 dlv
dle
39 0 1210 2559 dls
1218 2559 dlt
-6 -6 dlv
-2 -5 dlv
0 -9 dlv
2 -5 dlv
6 -6 dlv
8 -3 dlv
6 0 dlv
8 3 dlv
6 6 dlv
3 5 dlv
0 9 dlv
-3 5 dlv
-6 6 dlv
dle
0 56 1555 2513 dls
1510 2629 dlt
-7 -4 dlv
-4 -10 dlv
0 -11 dlv
4 -11 dlv
7 -3 dlv
7 3 dlv
3 7 dlv
4 18 dlv
3 7 dlv
7 4 dlv
4 0 dlv
7 -4 dlv
3 -10 dlv
0 -11 dlv
-3 -11 dlv
-7 -3 dlv
dle
49 21 1646 2156 dls
1646 2198 dlt
49 -21 dlv
15 -7 dlv
7 -7 dlv
3 -7 dlv
0 -4 dlv
dle
59 0 1200 1939 dls
1228 1939 dlt
-6 5 dlv
-3 6 dlv
0 8 dlv
3 6 dlv
6 6 dlv
8 2 dlv
6 0 dlv
8 -2 dlv
6 -6 dlv
3 -6 dlv
0 -8 dlv
-3 -6 dlv
-6 -5 dlv
dle
3277 3147 dlt
-7 -3 dlv
-4 -11 dlv
0 -10 dlv
4 -11 dlv
7 -3 dlv
7 3 dlv
3 7 dlv
4 18 dlv
3 7 dlv
7 3 dlv
4 0 dlv
7 -3 dlv
3 -11 dlv
0 -10 dlv
-3 -11 dlv
-7 -3 dlv
dle
39 0 3124 3074 dls
3132 3074 dlt
-5 -5 dlv
-3 -6 dlv
0 -8 dlv
3 -6 dlv
5 -6 dlv
9 -2 dlv
5 0 dlv
9 2 dlv
5 6 dlv
3 6 dlv
0 8 dlv
-3 6 dlv
-5 5 dlv
dle
0 56 3470 3028 dls
3424 3144 dlt
-7 -4 dlv
-3 -10 dlv
0 -11 dlv
3 -10 dlv
7 -4 dlv
7 4 dlv
4 7 dlv
3 17 dlv
4 7 dlv
7 4 dlv
3 0 dlv
7 -4 dlv
4 -10 dlv
0 -11 dlv
-4 -10 dlv
-7 -4 dlv
dle
49 21 3561 2671 dls
3561 2713 dlt
49 -21 dlv
14 -7 dlv
7 -7 dlv
3 -7 dlv
0 -4 dlv
dle
59 0 3114 2454 dls
3142 2454 dlt
-5 6 dlv
-3 5 dlv
0 9 dlv
3 6 dlv
5 5 dlv
9 3 dlv
5 0 dlv
9 -3 dlv
5 -5 dlv
3 -6 dlv
0 -9 dlv
-3 -5 dlv
-5 -6 dlv
dle
1362 3744 dlt
-7 -4 dlv
-3 -10 dlv
0 -11 dlv
3 -10 dlv
7 -4 dlv
7 4 dlv
4 7 dlv
3 17 dlv
4 7 dlv
7 4 dlv
3 0 dlv
7 -4 dlv
4 -10 dlv
0 -11 dlv
-4 -10 dlv
-7 -4 dlv
dle
39 0 1210 3810 dls
1218 3810 dlt
-6 -5 dlv
-2 -6 dlv
0 -8 dlv
2 -6 dlv
6 -5 dlv
8 -3 dlv
6 0 dlv
8 3 dlv
6 5 dlv
3 6 dlv
0 8 dlv
-3 6 dlv
-6 5 dlv
dle
0 56 1555 3698 dls
1510 3814 dlt
-7 -4 dlv
-4 -10 dlv
0 -11 dlv
4 -10 dlv
7 -4 dlv
7 4 dlv
3 7 dlv
4 17 dlv
3 7 dlv
7 4 dlv
4 0 dlv
7 -4 dlv
3 -10 dlv
0 -11 dlv
-3 -10 dlv
-7 -4 dlv
dle
49 21 1646 4136 dls
1646 4178 dlt
49 -21 dlv
15 -7 dlv
7 -7 dlv
3 -7 dlv
0 -3 dlv
dle
59 0 1200 4369 dls
1228 4369 dlt
-6 5 dlv
-3 6 dlv
0 8 dlv
3 6 dlv
6 6 dlv
8 2 dlv
6 0 dlv
8 -2 dlv
6 -6 dlv
3 -6 dlv
0 -8 dlv
-3 -6 dlv
-6 -5 dlv
dle
1000 0 0 slc
1000 0 0 sfc
272 1891 dpb
272 2023 dpv
353 2023 dpv
419 1957 dpv
353 1891 dpv
dps
272 2480 dpb
272 2612 dpv
353 2612 dpv
419 2546 dpv
353 2480 dpv
dps
4174 2701 dpb
4174 2833 dpv
4255 2833 dpv
4322 2767 dpv
4255 2701 dpv
dps
1347 2958 1406 3017 dbs
1494 2958 1553 3017 dbs
832 2517 890 2576 dbs
2010 2222 2069 2281 dbs
832 1928 890 1987 dbs
935 3069 dpb
935 3201 dpv
1016 3201 dpv
1082 3135 dpv
1016 3069 dpv
dps
1892 3069 dpb
1892 3201 dpv
1811 3201 dpv
1745 3135 dpv
1811 3069 dpv
dps
3261 3474 3320 3533 dbs
3409 3474 3468 3533 dbs
2746 3032 2805 3091 dbs
3924 2738 3983 2796 dbs
2746 2443 2805 2502 dbs
346 3658 dpb
346 3791 dpv
427 3791 dpv
493 3724 dpv
427 3658 dpv
dps
2996 3805 dpb
2996 3938 dpv
3077 3938 dpv
3144 3872 dpv
3077 3805 dpv
dps
3733 3805 dpb
3733 3938 dpv
3652 3938 dpv
3585 3872 dpv
3652 3805 dpv
dps
346 4321 dpb
346 4453 dpv
427 4453 dpv
493 4387 dpv
427 4321 dpv
dps
1347 3327 1406 3386 dbs
1494 3327 1553 3386 dbs
832 3768 890 3827 dbs
2010 4063 2069 4122 dbs
832 4357 890 4416 dbs
0 831 4600 5514 clwin
gfs
%%Trailer
%%EOF
